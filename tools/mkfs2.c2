#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>



#include "../kern/fs/fs_ds.h"
#include "../libs/bplustree.h"

//global variates
typedef struct{
    uint ext_nums;
    int fd;  
    uint me_now;
    int me_pos;
}_mkfs_info;

_mkfs_info mkfs_info;
#define ME_NOW (mkfs_info.me_now)
#define ME_POS (mkfs_info.me_pos)

#define MKFS_FD ((mkfs_info.fd))
#define ESTIMATE_LEN (MEXTS*1800)
node mext[ESTIMATE_LEN];

#define FILE_PATH "../fs.img"
/*************utiles***************/
static size_t get_file_size(const char *path)
{
    size_t filesize = -1;
    struct stat statbuf;
    if(stat(path, &statbuf) < 0)
    {
        return filesize;
    }

    filesize = statbuf.st_size;
    return filesize;
}
int calc_ext_nums();
inline int calc_ext_nums()
{
    int ext_num;
    ext_num = get_file_size(FILE_PATH) / EXT_SIZE;
    return ext_num;
}

static void read_n_ext(_off_t n, void *buf)
{
    lseek(MKFS_FD, n * EXT_SIZE, SEEK_SET);
    read(MKFS_FD, buf, EXT_SIZE);
}
static void write_n_ext(_off_t n, void *buf)
{
    lseek(MKFS_FD, n * EXT_SIZE, SEEK_SET);
    write(MKFS_FD, buf,EXT_SIZE);
    fsync(MKFS_FD);   
}

int init_mkfs_info()
{
    int ret;
    mkfs_info.fd = open(FILE_PATH, O_RDWR);
    mkfs_info.ext_nums = ret = calc_ext_nums();    
    ME_NOW = 1;

    printf("filename :%s , ext_nums : %d\n",FILE_PATH, mkfs_info.ext_nums);
    return ret;
}
void mkfs()
{
    
//    exts =  init_mkfs_info();
}





